// Hazard control - in case of lw stall or branch hazard, reset WB, MEM and EX control signals to 0
// leave the addr, data and reg content unchanged
else if (ID_flush_lw_stall == 1'b1) begin
RegWrite_out = 1'b0;
MemtoReg_out = 1'b0; Branch_out = 1'b0;
MemRead_out = 1'b0;
MemWrite_out = 1'b0;
Jump_out = 1'b0;
RegDst_out = 1'b0;
ALUSrc_out = 1'b0; ALUOp_out = 2'b0; end
else if (ID_flush_branch == 1'b1) begin
RegWrite_out = 1'b0;
MemtoReg_out = 1'b0;
Branch_out = 1'b0;
MemRead_out = 1'b0;
MemWrite_out = 1'b0;
Jump_out = 1'b0;
RegDst_out = 1'b0;
ALUSrc_out = 1'b0; ALUOp_out = 2'b0; end
// If no hazard control required, proceed normally (retain all values as it is) else begin
RegWrite_out = RegWrite_in;
MemtoReg_out = MemtoReg_in;
Branch_out = Branch_in;
MemRead_out = MemRead_in;
MemWrite_out = MemWrite_in; Jump_out = Jump_in;
RegDst_out = RegDst_in;
ALUSrc_out = ALUSrc_in; ALUOp_out = ALUOp_in;
jump_addr_out = jump_addr_in; pc_inc4_out = pc_inc4_in; reg_read_data1_out = reg_read_data1_in; reg_read_data2_out = reg_read_data2_in; imm_sign_extended_out = imm_sign_extended_in; IF_ID_register_rs_out = IF_ID_register_rs_in;
IF_ID_register_rt_out = IF_ID_register_rt_in;
IF_ID_register_rd_out = IF_ID_register_rd_in;
IF_ID_funct_out = IF_ID_funct_in; IF_ID_opcode_out = IF_ID_opcode_in;  end end
Endmodule




// ALU control unit
module ALU_control ( input [1:0] ALU_op,
input [5:0] funct,
input [5:0] op_code, // reqd for i-type instructions output [3:0] ALU_ctrl);
assign ALU_ctrl[3] = 0;
assign ALU_ctrl[2] = ((~ALU_op[1])&(ALU_op[0])) |
((ALU_op[1])&(~ALU_op[0])&(~funct[3])&(~funct[2])&(funct[1])&(~funct[0])) |
((ALU_op[1])&(~ALU_op[0])&(funct[3])&(~funct[2])&(funct[1])&(~funct[0]))
|  ((ALU_op[1])&(ALU_op[0]) & op_code[1]);
assign ALU_ctrl[1] = ((~ALU_op[1])&(~ALU_op[0])) |
((~ALU_op[1])&(ALU_op[0])) |
((ALU_op[1])&(~ALU_op[0])&(~funct[3])&(~funct[2])&(~funct[1])&(~funct[0])) |
((ALU_op[1])&(~ALU_op[0])&(~funct[3])&(~funct[2])&(funct[1])&(~funct[0]))|
((ALU_op[1])&(~ALU_op[0])&(funct[3])&(~funct[2])&(funct[1])&(~funct[0]))
|  ((ALU_op[1])&(ALU_op[0])&(~op_code[2]));
assign
ALU_ctrl[0]=((ALU_op[1])&(~ALU_op[0])&(~funct[3])&(funct[2])&(~funct[1])&(funct[0
] )) |
((ALU_op[1])&(~ALU_op[0])&(funct[3])&(~funct[2])&(funct[1])&(~funct[0])) |
((ALU_op[1])&(ALU_op[0])&(op_code[2])&(~op_code[1])&(op_code[0])) |
((ALU_op[1])&(ALU_op[0])&(~op_code[2])&(op_code[1])&(~op_code[0])); endmodule
// 3 to 1 N-bit muxes
module mux_N_bit_3to1 #(parameter N = 32)(
input [31:0] in0, in1, in2, input [1:0] select,
output reg [31:0] mux_out);
always @(in0 or in1 or in2 or select) begin case(select)
2'b00: mux_out <= in0; 2'b01:
mux_out <= in1; 2'b10: mux_out <= in2; default:
mux_out <= in0; endcase end
endmodule
// left shift branch offset by 2
module left_shifter_branch ( input [31:0] in, output [31:0] out);
assign out[31:0]={in[29:0],2'b00};
endmodule


// EX/MEM state registers
module EX_MEM_reg (
input clk, reset,
// Hazard control signal - branch/jump input EX_flush,
// WB control signals
input RegWrite_in, MemtoReg_in,
// MEM control signals
input Branch_in, MemRead_in, MemWrite_in, Jump_in,
// Addresses, memory and register contents input [31:0] jump_addr_in, branch_addr_in, input ALU_zero_in, input [31:0] ALU_result_in, reg_read_data2_in, input [4:0] ID_EX_register_rd_in,
// Corresponding updated outputs output reg RegWrite_out, MemtoReg_out,
output reg Branch_out, MemRead_out, MemWrite_out, Jump_out, output reg [31:0] jump_addr_out, branch_addr_out, output reg ALU_zero_out, output reg [31:0] ALU_result_out, reg_read_data2_out, output reg [4:0] EX_MEM_register_rd_out);
always @(posedge clk or posedge reset) begin
// Async reset - reset WB, MEM and EX control signals to 0 and clear all addr, data and  reg
content
if (reset == 1) begin
RegWrite_out <= 1'b0;
MemtoReg_out <= 1'b0;
Branch_out <= 1'b0;
MemRead_out <= 1'b0;
MemWrite_out <= 1'b0; Jump_out <= 1'b0; jump_addr_out <= 32'b0; branch_addr_out <= 32'b0; ALU_zero_out <= 1'b0; ALU_result_out <= 32'b0; reg_read_data2_out <= 32'b0; EX_MEM_register_rd_out <= 5'b0; end
Logic to solve or Avoid Hazards:
// Hazard control - in case of branch/jump hazards, reset WB, MEM and EX control signals to 0
// leave the addr, data and reg content unchanged else if (EX_flush == 1) begin
RegWrite_out <= 1'b0;
MemtoReg_out <= 1'b0;
Branch_out <= 1'b0;
MemRead_out <= 1'b0;
MemWrite_out <= 1'b0; Jump_out <= 1'b0; end

// If no hazard control required, proceed normally (retain all values as it is)
else begin
RegWrite_out <= RegWrite_in;
MemtoReg_out <= MemtoReg_in;
Branch_out <= Branch_in;
MemRead_out <= MemRead_in;
MemWrite_out <= MemWrite_in; Jump_out <= Jump_in; jump_addr_out <= jump_addr_in; branch_addr_out <= branch_addr_in; ALU_zero_out <= ALU_zero_in; ALU_result_out <= ALU_result_in; reg_read_data2_out <= reg_read_data2_in;
EX_MEM_register_rd_out <= ID_EX_register_rd_in;  end end
endmodule // 
